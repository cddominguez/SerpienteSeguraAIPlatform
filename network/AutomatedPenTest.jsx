import React, { useState } from 'react';
import { InvokeLLM } from "@/api/integrations";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Badge } from "@/components/ui/badge";
import { Crosshair, Bot, FileText, AlertTriangle } from "lucide-react";
import ReactMarkdown from 'react-markdown';
import { Skeleton } from '@/components/ui/skeleton';
import { motion, AnimatePresence } from 'framer-motion';

export default function AutomatedPenTest() {
  const [target, setTarget] = useState("www.example.com");
  const [results, setResults] = useState(null);
  const [isLoading, setIsLoading] = useState(false);

  const startPenTest = async () => {
    setIsLoading(true);
    setResults(null);
    try {
      const response = await InvokeLLM({
        prompt: `Simulate an automated penetration test against the target: ${target}. 
        Act as an AI Red Teaming tool. Provide a summary of the test, a step-by-step log of the simulated attack path, and a list of key findings and recommendations. Use markdown for formatting.`,
        add_context_from_internet: true,
        response_json_schema: {
            type: "object",
            properties: {
                summary: { type: "string", description: "A high-level summary of the penetration test results." },
                attack_log: { type: "string", description: "A detailed, step-by-step log of the simulated attack in markdown format." },
                findings: { 
                    type: "array",
                    items: {
                        type: "object",
                        properties: {
                            vulnerability: { type: "string" },
                            severity: { type: "string", enum: ["Critical", "High", "Medium", "Low", "Informational"] },
                            recommendation: { type: "string" }
                        }
                    }
                }
            }
        }
      });
      setResults(response);
    } catch (error) {
      console.error("Penetration test simulation failed:", error);
    }
    setIsLoading(false);
  };

  const getSeverityColor = (severity) => ({
    "Critical": "bg-red-500",
    "High": "bg-orange-500",
    "Medium": "bg-yellow-500",
    "Low": "bg-blue-500",
    "Informational": "bg-gray-500",
  }[severity]);

  return (
    <Card className="bg-white/80 backdrop-blur-sm border-0 shadow-xl">
      <CardHeader>
        <CardTitle className="text-xl font-bold text-slate-900 flex items-center gap-2">
          <Bot className="w-5 h-5 text-red-600" />
          AI-Powered Offensive Simulation (Red Team)
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-6">
        <div className="flex items-end gap-4 p-4 bg-slate-50 rounded-lg border border-slate-200">
          <div className="flex-1">
            <Label htmlFor="target-domain">Target Domain / IP</Label>
            <Input id="target-domain" value={target} onChange={(e) => setTarget(e.target.value)} />
          </div>
          <Button onClick={startPenTest} disabled={isLoading} className="bg-red-600 hover:bg-red-700">
            <Crosshair className="w-4 h-4 mr-2" />
            {isLoading ? 'Simulating Attack...' : 'Start Simulation'}
          </Button>
        </div>

        <div>
            {isLoading && (
              <div className="space-y-4">
                <Skeleton className="h-8 w-1/4" />
                <Skeleton className="h-20 w-full" />
                <Skeleton className="h-8 w-1/4 mt-4" />
                <Skeleton className="h-40 w-full" />
              </div>
            )}
            <AnimatePresence>
            {results && (
                <motion.div 
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    className="space-y-8"
                >
                    <div>
                        <h3 className="font-bold text-slate-900 text-lg mb-2 flex items-center gap-2">
                            <FileText className="w-5 h-5" />
                            Test Summary
                        </h3>
                        <p className="text-sm text-slate-700">{results.summary}</p>
                    </div>

                    <div>
                        <h3 className="font-bold text-slate-900 text-lg mb-2 flex items-center gap-2">
                            <AlertTriangle className="w-5 h-5" />
                            Key Findings
                        </h3>
                        <div className="space-y-3">
                            {results.findings.map((finding, index) => (
                                <div key={index} className="border border-slate-200 rounded-lg p-4">
                                    <div className="flex justify-between items-start mb-2">
                                        <h4 className="font-semibold text-slate-800">{finding.vulnerability}</h4>
                                        <Badge className={`${getSeverityColor(finding.severity)} text-white`}>{finding.severity}</Badge>
                                    </div>
                                    <p className="text-sm text-slate-600"><strong className="text-slate-700">Recommendation:</strong> {finding.recommendation}</p>
                                </div>
                            ))}
                        </div>
                    </div>

                    <div>
                        <h3 className="font-bold text-slate-900 text-lg mb-2 flex items-center gap-2">
                            <Bot className="w-5 h-5" />
                            Simulated Attack Log
                        </h3>
                        <div className="prose prose-sm max-w-none p-4 bg-slate-900 text-slate-200 rounded-lg font-mono">
                            <ReactMarkdown>{results.attack_log}</ReactMarkdown>
                        </div>
                    </div>
                </motion.div>
            )}
            </AnimatePresence>
            {!results && !isLoading && (
                 <div className="text-center py-12">
                    <Crosshair className="w-12 h-12 mx-auto text-slate-300 mb-3" />
                    <p className="text-slate-500">Enter a target and start a simulation to see the results.</p>
                </div>
            )}
        </div>
      </CardContent>
    </Card>
  );
}