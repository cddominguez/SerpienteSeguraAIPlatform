import React, { useState } from 'react';
import { InvokeLLM } from "@/api/integrations";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { ShieldAlert, ListChecks, BrainCircuit } from 'lucide-react';
import { Skeleton } from '@/components/ui/skeleton';
import { motion, AnimatePresence } from 'framer-motion';

const sampleVulnerabilities = [
    { id: "CVE-2023-38843", service: "WinRAR", severity: "Critical", score: 9.8, details: "Improper validation of user-supplied data, allows remote code execution." },
    { id: "CVE-2023-4911", service: "Looney Tunables", severity: "High", score: 7.8, details: "Local privilege escalation vulnerability in the GNU C Library's dynamic loader." },
    { id: "CVE-2024-21887", service: "Ivanti Connect", severity: "Critical", score: 9.1, details: "Command injection vulnerability allowing an authenticated administrator to send specially crafted requests." },
    { id: "CVE-2022-0847", service: "Dirty Pipe", severity: "High", score: 7.8, details: "Allows overwriting data in arbitrary read-only files, leading to privilege escalation." },
    { id: "APACHE-LOG4J-2144228", service: "Apache Log4j", severity: "Medium", score: 6.5, details: "Incomplete fix for Log4Shell vulnerability under certain non-default configurations." },
];

export default function VulnerabilityPrioritizer() {
  const [analysis, setAnalysis] = useState(null);
  const [isLoading, setIsLoading] = useState(false);

  const runAnalysis = async () => {
    setIsLoading(true);
    try {
      const response = await InvokeLLM({
        prompt: `As a senior cybersecurity analyst, review this list of network vulnerabilities. Prioritize them based on exploitability, potential impact, and asset criticality (assume standard enterprise assets). Provide a concise 'Executive Summary' and then a 'Top 3 Priorities' list with clear, actionable recommendations for each.

Vulnerability Data:
${JSON.stringify(sampleVulnerabilities, null, 2)}
`,
        response_json_schema: {
          type: "object",
          properties: {
            executive_summary: { type: "string" },
            top_3_priorities: {
              type: "array",
              items: {
                type: "object",
                properties: {
                  cve_id: { type: "string" },
                  reasoning: { type: "string" },
                  recommendation: { type: "string" },
                  risk_level: { type: "string", enum: ["Critical", "High", "Medium"] }
                }
              }
            }
          }
        }
      });
      setAnalysis(response);
    } catch (error) {
      console.error("AI analysis failed:", error);
    }
    setIsLoading(false);
  };

  const getRiskColor = (risk) => ({
    "Critical": "bg-red-500 border-red-700",
    "High": "bg-orange-500 border-orange-700",
    "Medium": "bg-yellow-500 border-yellow-700"
  }[risk]);

  return (
    <Card className="bg-white/80 backdrop-blur-sm border-0 shadow-xl">
      <CardHeader className="flex flex-row items-center justify-between">
        <CardTitle className="text-xl font-bold text-slate-900 flex items-center gap-2">
          <BrainCircuit className="w-5 h-5 text-purple-600" />
          AI-Powered Vulnerability Prioritization
        </CardTitle>
        <Button onClick={runAnalysis} disabled={isLoading}>
          {isLoading ? 'Analyzing...' : 'Run AI Analysis'}
        </Button>
      </CardHeader>
      <CardContent className="grid md:grid-cols-3 gap-8">
        <div className="md:col-span-1">
          <h3 className="font-semibold text-slate-800 mb-3 flex items-center gap-2">
            <ListChecks className="w-4 h-4" />
            Detected Vulnerabilities
          </h3>
          <div className="space-y-2">
            {sampleVulnerabilities.map(vuln => (
              <div key={vuln.id} className="p-3 bg-slate-50 rounded-lg border border-slate-200">
                <p className="font-semibold text-sm">{vuln.id}</p>
                <p className="text-xs text-slate-600">{vuln.service}</p>
                <Badge variant="destructive">{vuln.severity} - {vuln.score}</Badge>
              </div>
            ))}
          </div>
        </div>
        <div className="md:col-span-2">
            <h3 className="font-semibold text-slate-800 mb-3 flex items-center gap-2">
                <ShieldAlert className="w-4 h-4" />
                AI Analysis & Recommendations
            </h3>
            {isLoading && (
              <div className="space-y-4">
                <Skeleton className="h-24 w-full" />
                <Skeleton className="h-16 w-full" />
                <Skeleton className="h-16 w-full" />
                <Skeleton className="h-16 w-full" />
              </div>
            )}
            <AnimatePresence>
            {analysis && (
              <motion.div 
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                className="space-y-6"
              >
                <div>
                  <h4 className="font-bold text-slate-900 mb-2">Executive Summary</h4>
                  <p className="text-sm text-slate-700 bg-blue-50 p-3 rounded-lg border border-blue-200">
                    {analysis.executive_summary}
                  </p>
                </div>
                <div>
                  <h4 className="font-bold text-slate-900 mb-2">Top 3 Priorities</h4>
                  <div className="space-y-4">
                    {analysis.top_3_priorities.map(item => (
                      <div key={item.cve_id} className={`p-4 rounded-lg border-l-4 ${getRiskColor(item.risk_level).replace('bg-', 'border-')}`}>
                        <div className="flex justify-between items-start">
                          <h5 className="font-bold text-lg text-slate-900">{item.cve_id}</h5>
                          <Badge className={`${getRiskColor(item.risk_level)} text-white`}>{item.risk_level} Risk</Badge>
                        </div>
                        <p className="text-sm text-slate-600 mt-2 mb-3"><strong className="text-slate-700">Reasoning:</strong> {item.reasoning}</p>
                        <p className="text-sm font-medium text-slate-800 bg-slate-100 p-3 rounded"><strong className="block mb-1">Action:</strong> {item.recommendation}</p>
                      </div>
                    ))}
                  </div>
                </div>
              </motion.div>
            )}
            </AnimatePresence>
            {!analysis && !isLoading && (
                <div className="text-center py-12">
                    <BrainCircuit className="w-12 h-12 mx-auto text-slate-300 mb-3" />
                    <p className="text-slate-500">Run AI analysis to prioritize vulnerabilities.</p>
                </div>
            )}
        </div>
      </CardContent>
    </Card>
  );
}