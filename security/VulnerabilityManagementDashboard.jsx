import React, { useState, useEffect, useCallback } from 'react';
import { InvokeLLM } from "@/api/integrations";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Bug, BrainCircuit, Zap, GitMerge, ShieldCheck, Container, Package, GitBranch, AlertTriangle, TrendingUp, Globe, Settings, Play, Clock } from 'lucide-react';
import { motion, AnimatePresence } from 'framer-motion';
import { useWebSocket } from '@/components/hooks/useWebSocket';

// Import sub-components
import ContainerSecurityScanner from './vulnerability/ContainerSecurityScanner';
import SupplyChainAnalyzer from './vulnerability/SupplyChainAnalyzer';
import RemediationOrchestrator from './vulnerability/RemediationOrchestrator';
import PredictiveAnalytics from './vulnerability/PredictiveAnalytics';
import ThreatIntelligence from './vulnerability/ThreatIntelligence';
import ComplianceMapper from './vulnerability/ComplianceMapper';
import PerformanceImpactAnalyzer from './vulnerability/PerformanceImpactAnalyzer';
import GitOpsIntegration from './vulnerability/GitOpsIntegration';

export default function VulnerabilityManagementDashboard() {
    // Enhanced state management
    const [vulnerabilities, setVulnerabilities] = useState([
        { 
            id: 'CVE-2024-1234', 
            severity: 'Critical', 
            component: 'Log4j', 
            status: 'Patched', 
            detected: '2024-07-01', 
            cvss: 9.8, 
            type: 'RCE',
            exploitAvailable: true,
            affectedContainers: ['prod-api-1', 'prod-api-2'],
            dependencies: ['spring-boot:2.6.3', 'apache-commons:3.12'],
            complianceImpact: ['PCI-DSS', 'SOC2'],
            estimatedFixTime: '2h',
            performanceImpact: 'low',
            threatIntel: { 
                activeExploits: 3, 
                darkWebMentions: 12,
                ransomwareUsage: true 
            }
        },
        { 
            id: 'CVE-2024-5678', 
            severity: 'High', 
            component: 'Nginx', 
            status: 'Pending', 
            detected: '2024-07-15', 
            cvss: 8.5, 
            type: 'XSS',
            exploitAvailable: false,
            affectedContainers: ['nginx-proxy'],
            dependencies: ['nginx:1.21.0'],
            complianceImpact: ['HIPAA'],
            estimatedFixTime: '1h',
            performanceImpact: 'minimal',
            threatIntel: { 
                activeExploits: 0, 
                darkWebMentions: 2,
                ransomwareUsage: false 
            }
        },
        { 
            id: 'CVE-2024-9101', 
            severity: 'Medium', 
            component: 'React', 
            status: 'Mitigated', 
            detected: '2024-06-20', 
            cvss: 6.1, 
            type: 'ReDoS',
            exploitAvailable: false,
            affectedContainers: ['frontend-app'],
            dependencies: ['react:18.2.0', 'react-dom:18.2.0'],
            complianceImpact: [],
            estimatedFixTime: '30m',
            performanceImpact: 'none',
            threatIntel: { 
                activeExploits: 0, 
                darkWebMentions: 0,
                ransomwareUsage: false 
            }
        },
        { 
            id: 'CVE-2024-1121', 
            severity: 'Low', 
            component: 'Express.js', 
            status: 'Pending', 
            detected: '2024-07-18', 
            cvss: 3.4, 
            type: 'Header Injection',
            exploitAvailable: false,
            affectedContainers: ['backend-service'],
            dependencies: ['express:4.18.0'],
            complianceImpact: [],
            estimatedFixTime: '15m',
            performanceImpact: 'none',
            threatIntel: { 
                activeExploits: 0, 
                darkWebMentions: 0,
                ransomwareUsage: false 
            }
        }
    ]);

    const [prioritization, setPrioritization] = useState(null);
    const [isAnalyzing, setIsAnalyzing] = useState(false);
    const [scanStatus, setScanStatus] = useState('idle');
    const [activeTab, setActiveTab] = useState('overview');
    const [predictions, setPredictions] = useState(null);
    const [remediationPlan, setRemediationPlan] = useState(null);
    const [selectedVulnerability, setSelectedVulnerability] = useState(null);
    
    // WebSocket for real-time updates
    const { messages, sendMessage, connectionStatus } = useWebSocket(
        'wss://security-demo.example.com'
    );

    // Real-time updates handler
    useEffect(() => {
        if (messages.length > 0) {
            const latestMessage = messages[messages.length - 1];
            if (latestMessage.type === 'NEW_VULNERABILITY') {
                setVulnerabilities(prev => [latestMessage.data, ...prev]);
            } else if (latestMessage.type === 'SCAN_UPDATE') {
                setScanStatus(latestMessage.status);
            }
        }
    }, [messages]);

    // Enhanced AI prioritization with multiple factors
    const prioritizeWithAI = async () => {
        setIsAnalyzing(true);
        try {
            const response = await InvokeLLM({
                prompt: `Analyze these vulnerabilities considering CVSS scores, exploit availability, business impact, container exposure, compliance requirements, and threat intelligence. Create a comprehensive remediation strategy. Vulnerabilities: ${JSON.stringify(vulnerabilities)}`,
                response_json_schema: {
                    type: 'object',
                    properties: {
                        prioritization_order: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    cve_id: { type: 'string' },
                                    rank: { type: 'number' },
                                    risk_score: { type: 'number' },
                                    rationale: { type: 'string' },
                                    suggested_action: { type: 'string' },
                                    automation_possible: { type: 'boolean' },
                                    estimated_time: { type: 'string' },
                                    prerequisites: { type: 'array', items: { type: 'string' } }
                                }
                            }
                        },
                        key_insights: { type: 'array', items: { type: 'string' } },
                        overall_risk_assessment: { type: 'string' },
                        recommended_immediate_actions: { type: 'array', items: { type: 'string' } }
                    }
                }
            });
            setPrioritization(response);
            
            // Generate remediation plan
            await generateRemediationPlan(response.prioritization_order);
        } catch (error) {
            console.error('AI prioritization failed:', error);
        } finally {
            setIsAnalyzing(false);
        }
    };

    // Generate automated remediation plan
    const generateRemediationPlan = async (prioritizedVulns) => {
        const plan = {
            phases: [],
            estimatedTotalTime: 0,
            automationLevel: 'high',
            rollbackStrategy: true
        };

        for (const vuln of prioritizedVulns) {
            const originalVuln = vulnerabilities.find(v => v.id === vuln.cve_id);
            plan.phases.push({
                vulnerability: vuln.cve_id,
                actions: [
                    { type: 'backup', target: originalVuln?.affectedContainers },
                    { type: 'patch', method: vuln.automation_possible ? 'automated' : 'manual' },
                    { type: 'test', scope: 'integration' },
                    { type: 'deploy', strategy: 'rolling' },
                    { type: 'verify', checks: ['functionality', 'performance', 'security'] }
                ],
                estimatedTime: vuln.estimated_time,
                dependencies: vuln.prerequisites
            });
        }

        setRemediationPlan(plan);
    };

    // Start comprehensive security scan
    const startComprehensiveScan = async () => {
        setScanStatus('scanning');
        sendMessage({ action: 'START_SCAN', targets: ['containers', 'dependencies', 'infrastructure'] });
        
        // Simulate scan progress
        setTimeout(() => setScanStatus('analyzing'), 2000);
        setTimeout(() => setScanStatus('complete'), 5000);
    };

    const getSeverityBadge = (severity) => {
        const colors = { 
            Critical: 'bg-red-500 text-white hover:bg-red-600', 
            High: 'bg-orange-500 text-white hover:bg-orange-600', 
            Medium: 'bg-yellow-500 text-black hover:bg-yellow-600', 
            Low: 'bg-blue-500 text-white hover:bg-blue-600' 
        };
        return colors[severity] || 'bg-gray-500 text-white';
    };

    // Calculate risk metrics
    const riskMetrics = {
        criticalCount: vulnerabilities.filter(v => v.severity === 'Critical').length,
        exploitableCount: vulnerabilities.filter(v => v.exploitAvailable).length,
        containersAtRisk: [...new Set(vulnerabilities.flatMap(v => v.affectedContainers))].length,
        complianceViolations: [...new Set(vulnerabilities.flatMap(v => v.complianceImpact))].length
    };

    return (
        <Card className="bg-white/90 backdrop-blur-sm border-0 shadow-2xl">
            <CardHeader className="pb-4">
                <div className="flex flex-col lg:flex-row items-start lg:items-center justify-between gap-4">
                    <div>
                        <CardTitle className="text-2xl font-bold text-slate-900 flex items-center gap-3">
                            <div className="p-2 bg-red-100 rounded-lg">
                                <Bug className="w-6 h-6 text-red-600" />
                            </div>
                            AI-Powered Vulnerability Management
                        </CardTitle>
                        <CardDescription className="mt-2">
                            Real-time vulnerability detection, prioritization, and automated remediation
                        </CardDescription>
                    </div>
                    <div className="flex flex-wrap gap-3">
                        <div className="flex items-center gap-2 px-3 py-1 bg-slate-100 rounded-lg">
                            <div className={`w-2 h-2 rounded-full ${connectionStatus === 'connected' ? 'bg-green-500' : 'bg-red-500'} animate-pulse`} />
                            <span className="text-sm font-medium">{connectionStatus === 'connected' ? 'Live' : 'Offline'}</span>
                        </div>
                        <Button 
                            variant="outline" 
                            onClick={prioritizeWithAI} 
                            disabled={isAnalyzing}
                            className="hover:bg-indigo-50"
                        >
                            <BrainCircuit className="w-4 h-4 mr-2" /> 
                            {isAnalyzing ? 'Analyzing...' : 'AI Prioritization'}
                        </Button>
                        <Button 
                            onClick={startComprehensiveScan}
                            disabled={scanStatus === 'scanning'}
                            className="bg-gradient-to-r from-blue-500 to-indigo-600 hover:from-blue-600 hover:to-indigo-700"
                        >
                            <Zap className="w-4 h-4 mr-2" /> 
                            {scanStatus === 'scanning' ? 'Scanning...' : 'Start Deep Scan'}
                        </Button>
                    </div>
                </div>

                {/* Risk Metrics Bar */}
                <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mt-6">
                    <motion.div 
                        whileHover={{ scale: 1.05 }}
                        className="bg-red-50 border border-red-200 rounded-lg p-3"
                    >
                        <div className="flex items-center justify-between">
                            <span className="text-sm font-medium text-red-700">Critical Issues</span>
                            <AlertTriangle className="w-4 h-4 text-red-600" />
                        </div>
                        <p className="text-2xl font-bold text-red-900 mt-1">{riskMetrics.criticalCount}</p>
                    </motion.div>
                    
                    <motion.div 
                        whileHover={{ scale: 1.05 }}
                        className="bg-orange-50 border border-orange-200 rounded-lg p-3"
                    >
                        <div className="flex items-center justify-between">
                            <span className="text-sm font-medium text-orange-700">Exploitable</span>
                            <Zap className="w-4 h-4 text-orange-600" />
                        </div>
                        <p className="text-2xl font-bold text-orange-900 mt-1">{riskMetrics.exploitableCount}</p>
                    </motion.div>
                    
                    <motion.div 
                        whileHover={{ scale: 1.05 }}
                        className="bg-blue-50 border border-blue-200 rounded-lg p-3"
                    >
                        <div className="flex items-center justify-between">
                            <span className="text-sm font-medium text-blue-700">Containers at Risk</span>
                            <Container className="w-4 h-4 text-blue-600" />
                        </div>
                        <p className="text-2xl font-bold text-blue-900 mt-1">{riskMetrics.containersAtRisk}</p>
                    </motion.div>
                    
                    <motion.div 
                        whileHover={{ scale: 1.05 }}
                        className="bg-purple-50 border border-purple-200 rounded-lg p-3"
                    >
                        <div className="flex items-center justify-between">
                            <span className="text-sm font-medium text-purple-700">Compliance Issues</span>
                            <ShieldCheck className="w-4 h-4 text-purple-600" />
                        </div>
                        <p className="text-2xl font-bold text-purple-900 mt-1">{riskMetrics.complianceViolations}</p>
                    </motion.div>
                </div>
            </CardHeader>

            <CardContent className="space-y-6">
                {/* AI Prioritization Results */}
                <AnimatePresence>
                    {prioritization && (
                        <motion.div 
                            initial={{ opacity: 0, height: 0 }} 
                            animate={{ opacity: 1, height: 'auto' }} 
                            exit={{ opacity: 0, height: 0 }}
                            className="p-6 bg-gradient-to-r from-indigo-50 to-purple-50 border border-indigo-200 rounded-xl"
                        >
                            <h3 className="font-bold text-lg text-indigo-900 mb-4 flex items-center gap-2">
                                <BrainCircuit className="w-5 h-5" />
                                AI-Driven Remediation Strategy
                            </h3>
                            
                            <div className="space-y-4">
                                <div className="bg-white/80 rounded-lg p-4">
                                    <h4 className="font-semibold text-indigo-800 mb-2">Risk Assessment</h4>
                                    <p className="text-sm text-gray-700">{prioritization.overall_risk_assessment}</p>
                                </div>
                                
                                <div className="bg-white/80 rounded-lg p-4">
                                    <h4 className="font-semibold text-indigo-800 mb-2">Immediate Actions Required</h4>
                                    <ul className="list-disc list-inside space-y-1">
                                        {prioritization.recommended_immediate_actions.map((action, idx) => (
                                            <li key={idx} className="text-sm text-gray-700">{action}</li>
                                        ))}
                                    </ul>
                                </div>
                                
                                <div className="bg-white/80 rounded-lg p-4">
                                    <h4 className="font-semibold text-indigo-800 mb-3">Prioritized Remediation Order</h4>
                                    <div className="space-y-3">
                                        {prioritization.prioritization_order.map((item, idx) => (
                                            <motion.div 
                                                key={item.cve_id}
                                                initial={{ x: -20, opacity: 0 }}
                                                animate={{ x: 0, opacity: 1 }}
                                                transition={{ delay: idx * 0.1 }}
                                                className="flex items-start gap-3 p-3 bg-indigo-50 rounded-lg"
                                            >
                                                <div className="flex-shrink-0 w-8 h-8 bg-indigo-600 text-white rounded-full flex items-center justify-center font-bold text-sm">
                                                    {item.rank}
                                                </div>
                                                <div className="flex-grow">
                                                    <div className="flex items-center gap-2 mb-1">
                                                        <span className="font-bold text-indigo-900">{item.cve_id}</span>
                                                        <Badge variant="secondary" className="text-xs">
                                                            Risk Score: {item.risk_score}/10
                                                        </Badge>
                                                        {item.automation_possible && (
                                                            <Badge className="bg-green-100 text-green-800 text-xs">
                                                                <Play className="w-3 h-3 mr-1" />
                                                                Automatable
                                                            </Badge>
                                                        )}
                                                        <Badge variant="outline" className="text-xs">
                                                            <Clock className="w-3 h-3 mr-1" />
                                                            {item.estimated_time}
                                                        </Badge>
                                                    </div>
                                                    <p className="text-sm font-medium text-gray-800 mb-1">
                                                        {item.suggested_action}
                                                    </p>
                                                    <p className="text-xs text-gray-600">
                                                        {item.rationale}
                                                    </p>
                                                    {item.prerequisites.length > 0 && (
                                                        <div className="mt-2">
                                                            <span className="text-xs font-medium text-gray-700">Prerequisites: </span>
                                                            <span className="text-xs text-gray-600">{item.prerequisites.join(', ')}</span>
                                                        </div>
                                                    )}
                                                </div>
                                            </motion.div>
                                        ))}
                                    </div>
                                </div>
                                
                                {remediationPlan && (
                                    <div className="bg-white/80 rounded-lg p-4 mt-4">
                                        <h4 className="font-semibold text-indigo-800 mb-2">Automated Remediation Plan</h4>
                                        <div className="flex items-center gap-4 text-sm">
                                            <span>Total Phases: {remediationPlan.phases.length}</span>
                                            <span>Automation Level: {remediationPlan.automationLevel}</span>
                                            <Button size="sm" variant="outline" className="ml-auto">
                                                <Play className="w-3 h-3 mr-1" />
                                                Execute Plan
                                            </Button>
                                        </div>
                                    </div>
                                )}
                            </div>
                        </motion.div>
                    )}
                </AnimatePresence>

                {/* Enhanced Tabs */}
                <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
                    <TabsList className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-8 w-full">
                        <TabsTrigger value="overview">Overview</TabsTrigger>
                        <TabsTrigger value="containers">Containers</TabsTrigger>
                        <TabsTrigger value="supply-chain">Supply Chain</TabsTrigger>
                        <TabsTrigger value="predictions">Predictions</TabsTrigger>
                        <TabsTrigger value="threat-intel">Threat Intel</TabsTrigger>
                        <TabsTrigger value="compliance">Compliance</TabsTrigger>
                        <TabsTrigger value="gitops">GitOps</TabsTrigger>
                        <TabsTrigger value="performance">Impact</TabsTrigger>
                    </TabsList>

                    <TabsContent value="overview" className="mt-6">
                        <div className="overflow-x-auto">
                            <Table>
                                <TableHeader>
                                    <TableRow>
                                        <TableHead>Vulnerability ID</TableHead>
                                        <TableHead>Severity</TableHead>
                                        <TableHead>Component</TableHead>
                                        <TableHead>CVSS</TableHead>
                                        <TableHead>Status</TableHead>
                                        <TableHead>Containers</TableHead>
                                        <TableHead>Exploit</TableHead>
                                        <TableHead>Compliance</TableHead>
                                        <TableHead>Actions</TableHead>
                                    </TableRow>
                                </TableHeader>
                                <TableBody>
                                    {vulnerabilities.map(vuln => (
                                        <TableRow key={vuln.id} className="hover:bg-slate-50">
                                            <TableCell className="font-medium">{vuln.id}</TableCell>
                                            <TableCell>
                                                <Badge className={getSeverityBadge(vuln.severity)}>
                                                    {vuln.severity}
                                                </Badge>
                                            </TableCell>
                                            <TableCell>{vuln.component}</TableCell>
                                            <TableCell>
                                                <div className="flex items-center gap-2">
                                                    <span className="font-semibold">{vuln.cvss}</span>
                                                    <div className="w-20 h-2 bg-gray-200 rounded-full overflow-hidden">
                                                        <div 
                                                            className={`h-full ${
                                                                vuln.cvss >= 9 ? 'bg-red-500' :
                                                                vuln.cvss >= 7 ? 'bg-orange-500' :
                                                                vuln.cvss >= 4 ? 'bg-yellow-500' :
                                                                'bg-blue-500'
                                                            }`}
                                                            style={{ width: `${(vuln.cvss / 10) * 100}%` }}
                                                        />
                                                    </div>
                                                </div>
                                            </TableCell>
                                            <TableCell>
                                                <Badge variant={vuln.status === 'Patched' ? 'success' : 'secondary'}>
                                                    {vuln.status}
                                                </Badge>
                                            </TableCell>
                                            <TableCell>
                                                <div className="flex items-center gap-1">
                                                    <Container className="w-4 h-4 text-blue-600" />
                                                    <span className="text-sm">{vuln.affectedContainers.length}</span>
                                                </div>
                                            </TableCell>
                                            <TableCell>
                                                {vuln.exploitAvailable ? (
                                                    <Badge className="bg-red-100 text-red-800">
                                                        <AlertTriangle className="w-3 h-3 mr-1" />
                                                        Available
                                                    </Badge>
                                                ) : (
                                                    <Badge variant="outline">None</Badge>
                                                )}
                                            </TableCell>
                                            <TableCell>
                                                {vuln.complianceImpact.length > 0 ? (
                                                    <div className="flex flex-wrap gap-1">
                                                        {vuln.complianceImpact.map(compliance => (
                                                            <Badge key={compliance} variant="outline" className="text-xs">
                                                                {compliance}
                                                            </Badge>
                                                        ))}
                                                    </div>
                                                ) : (
                                                    <span className="text-gray-400">-</span>
                                                )}
                                            </TableCell>
                                            <TableCell>
                                                <Button 
                                                    variant="ghost" 
                                                    size="sm"
                                                    onClick={() => setSelectedVulnerability(vuln)}
                                                >
                                                    Details
                                                </Button>
                                            </TableCell>
                                        </TableRow>
                                    ))}
                                </TableBody>
                            </Table>
                        </div>
                    </TabsContent>

                    <TabsContent value="containers">
                        <ContainerSecurityScanner 
                            vulnerabilities={vulnerabilities}
                            onScanComplete={(results) => console.log('Container scan results:', results)}
                        />
                    </TabsContent>

                    <TabsContent value="supply-chain">
                        <SupplyChainAnalyzer 
                            vulnerabilities={vulnerabilities}
                            onAnalysisComplete={(results) => console.log('Supply chain analysis:', results)}
                        />
                    </TabsContent>

                    <TabsContent value="predictions">
                        <PredictiveAnalytics 
                            historicalData={vulnerabilities}
                            onPrediction={(pred) => setPredictions(pred)}
                        />
                    </TabsContent>

                    <TabsContent value="threat-intel">
                        <ThreatIntelligence 
                            vulnerabilities={vulnerabilities}
                            onIntelUpdate={(intel) => console.log('Threat intel update:', intel)}
                        />
                    </TabsContent>

                    <TabsContent value="compliance">
                        <ComplianceMapper 
                            vulnerabilities={vulnerabilities}
                            frameworks={['PCI-DSS', 'HIPAA', 'SOC2', 'ISO27001']}
                        />
                    </TabsContent>

                    <TabsContent value="gitops">
                        <GitOpsIntegration 
                            vulnerabilities={vulnerabilities}
                            remediationPlan={remediationPlan}
                        />
                    </TabsContent>

                    <TabsContent value="performance">
                        <PerformanceImpactAnalyzer 
                            vulnerabilities={vulnerabilities}
                            systems={['API', 'Database', 'Cache', 'CDN']}
                        />
                    </TabsContent>
                </Tabs>

                {/* Automated Remediation Orchestrator */}
                {selectedVulnerability && (
                    <RemediationOrchestrator
                        vulnerability={selectedVulnerability}
                        onClose={() => setSelectedVulnerability(null)}
                        onRemediate={(action) => console.log('Remediation action:', action)}
                    />
                )}
            </CardContent>
        </Card>
    );
}