import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { GitBranch, GitMerge, GitPullRequest, CheckCircle, Clock, AlertCircle } from 'lucide-react';
import { motion } from 'framer-motion';

export default function GitOpsIntegration({ vulnerabilities, remediationPlan }) {
    const [pullRequests, setPullRequests] = useState([
        {
            id: 'PR-001',
            title: 'Security: Update Log4j to 2.17.1 (CVE-2024-1234)',
            status: 'open',
            vulnerability: 'CVE-2024-1234',
            branch: 'security/log4j-update',
            repository: 'api-service',
            created: '2024-01-15T10:30:00Z',
            checks: {
                security_scan: 'passed',
                tests: 'passed',
                build: 'passed'
            },
            auto_generated: true
        },
        {
            id: 'PR-002',
            title: 'Security: Nginx configuration hardening (CVE-2024-5678)',
            status: 'merged',
            vulnerability: 'CVE-2024-5678',
            branch: 'security/nginx-hardening',
            repository: 'nginx-proxy',
            created: '2024-01-14T09:15:00Z',
            merged: '2024-01-14T11:22:00Z',
            checks: {
                security_scan: 'passed',
                tests: 'passed',
                build: 'passed'
            },
            auto_generated: true
        }
    ]);

    const [workflows, setWorkflows] = useState([
        {
            name: 'Security Patch Deployment',
            status: 'running',
            vulnerability: 'CVE-2024-1234',
            steps: [
                { name: 'Create Feature Branch', status: 'completed' },
                { name: 'Apply Security Patches', status: 'completed' },
                { name: 'Run Security Tests', status: 'running' },
                { name: 'Create Pull Request', status: 'pending' },
                { name: 'Automated Review', status: 'pending' }
            ]
        }
    ]);

    const createAutomatedPR = async (vulnerability) => {
        // Simulate PR creation
        const newPR = {
            id: `PR-${Date.now()}`,
            title: `Security: Fix ${vulnerability.id} in ${vulnerability.component}`,
            status: 'open',
            vulnerability: vulnerability.id,
            branch: `security/${vulnerability.id.toLowerCase()}`,
            repository: vulnerability.affectedContainers[0] || 'main-app',
            created: new Date().toISOString(),
            checks: {
                security_scan: 'pending',
                tests: 'pending',
                build: 'pending'
            },
            auto_generated: true
        };

        setPullRequests(prev => [newPR, ...prev]);
    };

    const getStatusIcon = (status) => {
        switch (status) {
            case 'passed':
            case 'completed':
            case 'merged':
                return <CheckCircle className="w-4 h-4 text-green-600" />;
            case 'running':
            case 'pending':
                return <Clock className="w-4 h-4 text-yellow-600" />;
            case 'failed':
                return <AlertCircle className="w-4 h-4 text-red-600" />;
            default:
                return <Clock className="w-4 h-4 text-gray-400" />;
        }
    };

    const getStatusColor = (status) => ({
        open: 'bg-blue-100 text-blue-800',
        merged: 'bg-green-100 text-green-800',
        closed: 'bg-gray-100 text-gray-800',
        draft: 'bg-yellow-100 text-yellow-800'
    }[status] || 'bg-gray-100 text-gray-800');

    return (
        <div className="space-y-6">
            {/* GitOps Actions */}
            <Card className="border-0 shadow-lg">
                <CardHeader>
                    <div className="flex items-center justify-between">
                        <CardTitle className="flex items-center gap-2">
                            <GitBranch className="w-5 h-5 text-purple-600" />
                            Automated GitOps Actions
                        </CardTitle>
                        <div className="flex gap-2">
                            <Button variant="outline" size="sm">
                                <GitBranch className="w-4 h-4 mr-2" />
                                Sync Repositories
                            </Button>
                            <Button size="sm">
                                <GitPullRequest className="w-4 h-4 mr-2" />
                                Create Batch PRs
                            </Button>
                        </div>
                    </div>
                </CardHeader>
                <CardContent>
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                        {vulnerabilities.slice(0, 4).map((vuln, idx) => (
                            <motion.div
                                key={vuln.id}
                                whileHover={{ scale: 1.02 }}
                                className="border rounded-lg p-4 hover:shadow-md transition-shadow"
                            >
                                <div className="flex items-center justify-between mb-3">
                                    <Badge variant="outline" className="text-xs">
                                        {vuln.id}
                                    </Badge>
                                    <Badge className={`${vuln.severity === 'Critical' ? 'bg-red-500' : vuln.severity === 'High' ? 'bg-orange-500' : 'bg-yellow-500'} text-white text-xs`}>
                                        {vuln.severity}
                                    </Badge>
                                </div>
                                <p className="text-sm font-medium mb-2">{vuln.component}</p>
                                <p className="text-xs text-gray-600 mb-3">
                                    {vuln.affectedContainers.length} containers affected
                                </p>
                                <Button
                                    size="sm"
                                    variant="outline"
                                    className="w-full"
                                    onClick={() => createAutomatedPR(vuln)}
                                >
                                    <GitPullRequest className="w-3 h-3 mr-2" />
                                    Create PR
                                </Button>
                            </motion.div>
                        ))}
                    </div>
                </CardContent>
            </Card>

            {/* Active Pull Requests */}
            <Card className="border-0 shadow-lg">
                <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                        <GitPullRequest className="w-5 h-5 text-blue-600" />
                        Security Pull Requests
                    </CardTitle>
                </CardHeader>
                <CardContent>
                    <div className="space-y-4">
                        {pullRequests.map((pr, idx) => (
                            <motion.div
                                key={pr.id}
                                initial={{ opacity: 0, y: 20 }}
                                animate={{ opacity: 1, y: 0 }}
                                transition={{ delay: idx * 0.1 }}
                                className="border rounded-lg p-4 hover:shadow-md transition-shadow"
                            >
                                <div className="flex items-start justify-between mb-3">
                                    <div className="flex-1">
                                        <div className="flex items-center gap-2 mb-2">
                                            <h4 className="font-semibold text-sm">{pr.title}</h4>
                                            <Badge className={getStatusColor(pr.status)} variant="secondary">
                                                {pr.status}
                                            </Badge>
                                            {pr.auto_generated && (
                                                <Badge variant="outline" className="text-xs">
                                                    Auto-generated
                                                </Badge>
                                            )}
                                        </div>
                                        <div className="flex items-center gap-4 text-xs text-gray-600">
                                            <span>#{pr.id}</span>
                                            <span>{pr.repository}</span>
                                            <span>{pr.branch}</span>
                                            <span>{new Date(pr.created).toLocaleDateString()}</span>
                                        </div>
                                    </div>
                                </div>

                                {/* CI/CD Checks */}
                                <div className="mt-3 pt-3 border-t border-gray-100">
                                    <p className="text-sm font-medium mb-2">Automated Checks</p>
                                    <div className="flex items-center gap-4">
                                        <div className="flex items-center gap-2">
                                            {getStatusIcon(pr.checks.security_scan)}
                                            <span className="text-xs">Security Scan</span>
                                        </div>
                                        <div className="flex items-center gap-2">
                                            {getStatusIcon(pr.checks.tests)}
                                            <span className="text-xs">Tests</span>
                                        </div>
                                        <div className="flex items-center gap-2">
                                            {getStatusIcon(pr.checks.build)}
                                            <span className="text-xs">Build</span>
                                        </div>
                                    </div>
                                </div>

                                <div className="mt-3 flex justify-end gap-2">
                                    <Button size="sm" variant="outline">
                                        View PR
                                    </Button>
                                    {pr.status === 'open' && (
                                        <Button size="sm">
                                            <GitMerge className="w-3 h-3 mr-2" />
                                            Merge
                                        </Button>
                                    )}
                                </div>
                            </motion.div>
                        ))}
                    </div>
                </CardContent>
            </Card>

            {/* GitOps Workflows */}
            <Card className="border-0 shadow-lg">
                <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                        <GitBranch className="w-5 h-5 text-green-600" />
                        Active Workflows
                    </CardTitle>
                </CardHeader>
                <CardContent>
                    <div className="space-y-4">
                        {workflows.map((workflow, idx) => (
                            <div key={idx} className="border rounded-lg p-4">
                                <div className="flex items-center justify-between mb-4">
                                    <div>
                                        <h4 className="font-semibold">{workflow.name}</h4>
                                        <p className="text-sm text-gray-600">
                                            Remediating {workflow.vulnerability}
                                        </p>
                                    </div>
                                    <Badge className={getStatusColor(workflow.status)} variant="secondary">
                                        {workflow.status}
                                    </Badge>
                                </div>

                                <div className="space-y-2">
                                    {workflow.steps.map((step, stepIdx) => (
                                        <div key={stepIdx} className="flex items-center gap-3">
                                            {getStatusIcon(step.status)}
                                            <span className={`text-sm ${step.status === 'completed' ? 'text-gray-600' : 'font-medium'}`}>
                                                {step.name}
                                            </span>
                                        </div>
                                    ))}
                                </div>
                            </div>
                        ))}
                    </div>
                </CardContent>
            </Card>
        </div>
    );
}