import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Container, Shield, AlertTriangle, CheckCircle, Loader2 } from 'lucide-react';
import { motion } from 'framer-motion';

export default function ContainerSecurityScanner({ vulnerabilities, onScanComplete }) {
    const [scanProgress, setScanProgress] = useState(0);
    const [scanning, setScanning] = useState(false);
    const [containerResults, setContainerResults] = useState([]);

    const runContainerScan = async () => {
        setScanning(true);
        setScanProgress(0);
        
        // Simulate progressive scanning
        const interval = setInterval(() => {
            setScanProgress(prev => {
                if (prev >= 100) {
                    clearInterval(interval);
                    completeContainerScan();
                    return 100;
                }
                return prev + 10;
            });
        }, 500);
    };

    const completeContainerScan = async () => {
        // Simulated container scan results
        const results = [
            {
                name: 'prod-api-1',
                image: 'api:latest',
                runtime: 'docker',
                vulnerabilities: 3,
                misconfigurations: 2,
                secrets: 0,
                compliance: 85,
                layers: [
                    { name: 'base-image', vulnerabilities: 1 },
                    { name: 'app-layer', vulnerabilities: 2 }
                ]
            },
            {
                name: 'nginx-proxy',
                image: 'nginx:1.21.0',
                runtime: 'kubernetes',
                vulnerabilities: 1,
                misconfigurations: 0,
                secrets: 1,
                compliance: 92,
                layers: [
                    { name: 'nginx-base', vulnerabilities: 1 }
                ]
            }
        ];
        
        setContainerResults(results);
        setScanning(false);
        onScanComplete(results);
    };

    return (
        <div className="space-y-6">
            <Card className="border-0 shadow-lg">
                <CardHeader>
                    <div className="flex items-center justify-between">
                        <CardTitle className="flex items-center gap-2">
                            <Container className="w-5 h-5 text-blue-600" />
                            Container & Kubernetes Security
                        </CardTitle>
                        <Button 
                            onClick={runContainerScan} 
                            disabled={scanning}
                            className="bg-blue-600 hover:bg-blue-700"
                        >
                            {scanning ? (
                                <>
                                    <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                                    Scanning...
                                </>
                            ) : (
                                <>
                                    <Shield className="w-4 h-4 mr-2" />
                                    Scan Containers
                                </>
                            )}
                        </Button>
                    </div>
                </CardHeader>
                <CardContent>
                    {scanning && (
                        <div className="mb-6">
                            <div className="flex items-center justify-between mb-2">
                                <span className="text-sm font-medium">Scan Progress</span>
                                <span className="text-sm text-gray-500">{scanProgress}%</span>
                            </div>
                            <Progress value={scanProgress} className="h-2" />
                            <p className="text-xs text-gray-500 mt-2">
                                Analyzing container images, configurations, and runtime security...
                            </p>
                        </div>
                    )}

                    {containerResults.length > 0 && (
                        <div className="space-y-4">
                            {containerResults.map((container, idx) => (
                                <motion.div
                                    key={container.name}
                                    initial={{ opacity: 0, y: 20 }}
                                    animate={{ opacity: 1, y: 0 }}
                                    transition={{ delay: idx * 0.1 }}
                                    className="border rounded-lg p-4 hover:shadow-md transition-shadow"
                                >
                                    <div className="flex items-start justify-between mb-3">
                                        <div>
                                            <h4 className="font-semibold text-lg">{container.name}</h4>
                                            <p className="text-sm text-gray-600">{container.image}</p>
                                        </div>
                                        <Badge variant="outline">{container.runtime}</Badge>
                                    </div>

                                    <div className="grid grid-cols-4 gap-4 mb-3">
                                        <div className="text-center">
                                            <p className="text-2xl font-bold text-red-600">{container.vulnerabilities}</p>
                                            <p className="text-xs text-gray-500">Vulnerabilities</p>
                                        </div>
                                        <div className="text-center">
                                            <p className="text-2xl font-bold text-orange-600">{container.misconfigurations}</p>
                                            <p className="text-xs text-gray-500">Misconfigs</p>
                                        </div>
                                        <div className="text-center">
                                            <p className="text-2xl font-bold text-purple-600">{container.secrets}</p>
                                            <p className="text-xs text-gray-500">Secrets</p>
                                        </div>
                                        <div className="text-center">
                                            <p className="text-2xl font-bold text-green-600">{container.compliance}%</p>
                                            <p className="text-xs text-gray-500">Compliance</p>
                                        </div>
                                    </div>

                                    <div className="border-t pt-3">
                                        <p className="text-sm font-medium mb-2">Layer Analysis</p>
                                        <div className="space-y-2">
                                            {container.layers.map((layer, layerIdx) => (
                                                <div key={layerIdx} className="flex items-center justify-between text-sm">
                                                    <span className="text-gray-600">{layer.name}</span>
                                                    <div className="flex items-center gap-2">
                                                        {layer.vulnerabilities > 0 ? (
                                                            <Badge variant="destructive" className="text-xs">
                                                                {layer.vulnerabilities} issues
                                                            </Badge>
                                                        ) : (
                                                            <Badge variant="success" className="text-xs">
                                                                <CheckCircle className="w-3 h-3 mr-1" />
                                                                Clean
                                                            </Badge>
                                                        )}
                                                    </div>
                                                </div>
                                            ))}
                                        </div>
                                    </div>
                                </motion.div>
                            ))}
                        </div>
                    )}
                </CardContent>
            </Card>
        </div>
    );
}