import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Activity, TrendingDown, TrendingUp, Zap, Server } from 'lucide-react';
import { LineChart, Line, AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, BarChart, Bar } from 'recharts';
import { motion } from 'framer-motion';

export default function PerformanceImpactAnalyzer({ vulnerabilities, systems }) {
    const [performanceData, setPerformanceData] = useState({});
    const [impactPredictions, setImpactPredictions] = useState([]);
    const [systemMetrics, setSystemMetrics] = useState([]);

    useEffect(() => {
        analyzePerformanceImpact();
    }, [vulnerabilities, systems]);

    const analyzePerformanceImpact = () => {
        // Simulated performance impact analysis
        const data = {
            overall: {
                currentLoad: 75,
                predictedLoad: 82,
                riskLevel: 'Medium',
                affectedSystems: 3
            },
            vulnerabilityImpacts: vulnerabilities.map(vuln => ({
                id: vuln.id,
                component: vuln.component,
                currentImpact: vuln.performanceImpact,
                predictedImpact: {
                    cpu: Math.random() * 15 + 5,
                    memory: Math.random() * 20 + 10,
                    network: Math.random() * 10 + 5,
                    disk: Math.random() * 12 + 3
                },
                remediationImpact: {
                    downtime: Math.random() * 30 + 5, // minutes
                    resourceSpike: Math.random() * 40 + 20, // percentage
                    recovery: Math.random() * 60 + 30 // minutes
                }
            })),
            trends: [
                { time: '00:00', cpu: 45, memory: 60, network: 30 },
                { time: '04:00', cpu: 35, memory: 55, network: 25 },
                { time: '08:00', cpu: 75, memory: 70, network: 50 },
                { time: '12:00', cpu: 85, memory: 80, network: 65 },
                { time: '16:00', cpu: 90, memory: 85, network: 70 },
                { time: '20:00', cpu: 70, memory: 75, network: 55 },
                { time: '24:00', cpu: 50, memory: 65, network: 35 }
            ]
        };

        const predictions = [
            {
                scenario: 'Immediate Patching',
                impact: 'High',
                duration: '2-4 hours',
                resources: 'CPU +35%, Memory +20%',
                recommendation: 'Schedule during maintenance window'
            },
            {
                scenario: 'Rolling Updates',
                impact: 'Medium',
                duration: '4-6 hours',
                resources: 'CPU +15%, Memory +10%',
                recommendation: 'Recommended approach for production'
            },
            {
                scenario: 'Blue-Green Deployment',
                impact: 'Low',
                duration: '1-2 hours',
                resources: 'CPU +5%, Memory +100% (temporary)',
                recommendation: 'Best for critical systems'
            }
        ];

        const metrics = systems.map(system => ({
            name: system,
            current: {
                cpu: Math.random() * 100,
                memory: Math.random() * 100,
                disk: Math.random() * 100,
                network: Math.random() * 100
            },
            predicted: {
                cpu: Math.random() * 100,
                memory: Math.random() * 100,
                disk: Math.random() * 100,
                network: Math.random() * 100
            },
            status: ['Healthy', 'Warning', 'Critical'][Math.floor(Math.random() * 3)]
        }));

        setPerformanceData(data);
        setImpactPredictions(predictions);
        setSystemMetrics(metrics);
    };

    const getImpactColor = (impact) => ({
        'Low': 'text-green-600',
        'Medium': 'text-yellow-600',
        'High': 'text-red-600',
        'none': 'text-gray-600',
        'minimal': 'text-green-600',
        'low': 'text-green-600'
    }[impact] || 'text-gray-600');

    const getImpactBadge = (impact) => ({
        'Low': 'bg-green-100 text-green-800',
        'Medium': 'bg-yellow-100 text-yellow-800',
        'High': 'bg-red-100 text-red-800',
        'none': 'bg-gray-100 text-gray-800',
        'minimal': 'bg-green-100 text-green-800',
        'low': 'bg-green-100 text-green-800'
    }[impact] || 'bg-gray-100 text-gray-800');

    const getStatusIcon = (status) => {
        switch (status) {
            case 'Healthy':
                return <div className="w-3 h-3 bg-green-500 rounded-full" />;
            case 'Warning':
                return <div className="w-3 h-3 bg-yellow-500 rounded-full" />;
            case 'Critical':
                return <div className="w-3 h-3 bg-red-500 rounded-full" />;
            default:
                return <div className="w-3 h-3 bg-gray-500 rounded-full" />;
        }
    };

    return (
        <div className="space-y-6">
            {/* Performance Overview */}
            <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                <motion.div whileHover={{ scale: 1.02 }} className="bg-white rounded-lg border shadow-sm p-4">
                    <div className="flex items-center justify-between mb-2">
                        <Activity className="w-5 h-5 text-blue-600" />
                        <Badge className={getImpactBadge(performanceData.overall?.riskLevel)}>
                            {performanceData.overall?.riskLevel} Risk
                        </Badge>
                    </div>
                    <p className="text-2xl font-bold">{performanceData.overall?.currentLoad}%</p>
                    <p className="text-sm text-gray-600">Current System Load</p>
                </motion.div>

                <motion.div whileHover={{ scale: 1.02 }} className="bg-white rounded-lg border shadow-sm p-4">
                    <div className="flex items-center justify-between mb-2">
                        <TrendingUp className="w-5 h-5 text-orange-600" />
                        <span className="text-sm text-gray-500">Predicted</span>
                    </div>
                    <p className="text-2xl font-bold text-orange-600">{performanceData.overall?.predictedLoad}%</p>
                    <p className="text-sm text-gray-600">After Remediation</p>
                </motion.div>

                <motion.div whileHover={{ scale: 1.02 }} className="bg-white rounded-lg border shadow-sm p-4">
                    <div className="flex items-center justify-between mb-2">
                        <Server className="w-5 h-5 text-purple-600" />
                        <span className="text-sm text-gray-500">Systems</span>
                    </div>
                    <p className="text-2xl font-bold">{performanceData.overall?.affectedSystems}</p>
                    <p className="text-sm text-gray-600">Affected Systems</p>
                </motion.div>

                <motion.div whileHover={{ scale: 1.02 }} className="bg-white rounded-lg border shadow-sm p-4">
                    <div className="flex items-center justify-between mb-2">
                        <Zap className="w-5 h-5 text-green-600" />
                        <span className="text-sm text-gray-500">Optimization</span>
                    </div>
                    <p className="text-2xl font-bold text-green-600">+12%</p>
                    <p className="text-sm text-gray-600">Expected Improvement</p>
                </motion.div>
            </div>

            {/* Performance Trends */}
            <Card className="border-0 shadow-lg">
                <CardHeader>
                    <CardTitle>System Performance Trends</CardTitle>
                </CardHeader>
                <CardContent>
                    <div className="h-64">
                        <ResponsiveContainer width="100%" height="100%">
                            <LineChart data={performanceData.trends}>
                                <CartesianGrid strokeDasharray="3 3" />
                                <XAxis dataKey="time" />
                                <YAxis />
                                <Tooltip />
                                <Line type="monotone" dataKey="cpu" stroke="#3b82f6" strokeWidth={2} name="CPU %" />
                                <Line type="monotone" dataKey="memory" stroke="#10b981" strokeWidth={2} name="Memory %" />
                                <Line type="monotone" dataKey="network" stroke="#f59e0b" strokeWidth={2} name="Network %" />
                            </LineChart>
                        </ResponsiveContainer>
                    </div>
                </CardContent>
            </Card>

            {/* Vulnerability Impact Analysis */}
            <Card className="border-0 shadow-lg">
                <CardHeader>
                    <CardTitle>Vulnerability Performance Impact</CardTitle>
                </CardHeader>
                <CardContent>
                    <div className="space-y-4">
                        {performanceData.vulnerabilityImpacts?.map((vuln, idx) => (
                            <motion.div
                                key={vuln.id}
                                initial={{ opacity: 0, y: 20 }}
                                animate={{ opacity: 1, y: 0 }}
                                transition={{ delay: idx * 0.1 }}
                                className="border rounded-lg p-4"
                            >
                                <div className="flex items-center justify-between mb-4">
                                    <div>
                                        <h4 className="font-semibold">{vuln.id}</h4>
                                        <p className="text-sm text-gray-600">{vuln.component}</p>
                                    </div>
                                    <Badge className={getImpactBadge(vuln.currentImpact)}>
                                        {vuln.currentImpact} impact
                                    </Badge>
                                </div>

                                <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-4">
                                    <div>
                                        <p className="text-sm text-gray-600">CPU Impact</p>
                                        <p className="text-lg font-semibold">+{vuln.predictedImpact.cpu.toFixed(1)}%</p>
                                    </div>
                                    <div>
                                        <p className="text-sm text-gray-600">Memory Impact</p>
                                        <p className="text-lg font-semibold">+{vuln.predictedImpact.memory.toFixed(1)}%</p>
                                    </div>
                                    <div>
                                        <p className="text-sm text-gray-600">Network Impact</p>
                                        <p className="text-lg font-semibold">+{vuln.predictedImpact.network.toFixed(1)}%</p>
                                    </div>
                                    <div>
                                        <p className="text-sm text-gray-600">Disk Impact</p>
                                        <p className="text-lg font-semibold">+{vuln.predictedImpact.disk.toFixed(1)}%</p>
                                    </div>
                                </div>

                                <div className="bg-gray-50 rounded-lg p-3">
                                    <p className="text-sm font-medium mb-2">Remediation Impact</p>
                                    <div className="grid grid-cols-3 gap-4 text-sm">
                                        <div>
                                            <span className="text-gray-600">Downtime: </span>
                                            <span className="font-medium">{vuln.remediationImpact.downtime.toFixed(0)}min</span>
                                        </div>
                                        <div>
                                            <span className="text-gray-600">Resource Spike: </span>
                                            <span className="font-medium">+{vuln.remediationImpact.resourceSpike.toFixed(0)}%</span>
                                        </div>
                                        <div>
                                            <span className="text-gray-600">Recovery: </span>
                                            <span className="font-medium">{vuln.remediationImpact.recovery.toFixed(0)}min</span>
                                        </div>
                                    </div>
                                </div>
                            </motion.div>
                        ))}
                    </div>
                </CardContent>
            </Card>

            {/* Remediation Scenarios */}
            <Card className="border-0 shadow-lg">
                <CardHeader>
                    <CardTitle>Remediation Scenarios</CardTitle>
                </CardHeader>
                <CardContent>
                    <div className="space-y-4">
                        {impactPredictions.map((scenario, idx) => (
                            <motion.div
                                key={idx}
                                initial={{ opacity: 0, x: -20 }}
                                animate={{ opacity: 1, x: 0 }}
                                transition={{ delay: idx * 0.1 }}
                                className="border rounded-lg p-4 hover:shadow-md transition-shadow"
                            >
                                <div className="flex items-center justify-between mb-3">
                                    <h4 className="font-semibold">{scenario.scenario}</h4>
                                    <Badge className={getImpactBadge(scenario.impact)}>
                                        {scenario.impact} Impact
                                    </Badge>
                                </div>
                                <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-3">
                                    <div>
                                        <p className="text-sm text-gray-600">Duration</p>
                                        <p className="font-medium">{scenario.duration}</p>
                                    </div>
                                    <div>
                                        <p className="text-sm text-gray-600">Resource Usage</p>
                                        <p className="font-medium">{scenario.resources}</p>
                                    </div>
                                    <div className="md:col-span-1">
                                        <p className="text-sm text-gray-600">Recommendation</p>
                                        <p className="font-medium text-sm">{scenario.recommendation}</p>
                                    </div>
                                </div>
                            </motion.div>
                        ))}
                    </div>
                </CardContent>
            </Card>

            {/* System Health */}
            <Card className="border-0 shadow-lg">
                <CardHeader>
                    <CardTitle>System Health Overview</CardTitle>
                </CardHeader>
                <CardContent>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                        {systemMetrics.map((system, idx) => (
                            <div key={system.name} className="border rounded-lg p-4">
                                <div className="flex items-center justify-between mb-4">
                                    <div className="flex items-center gap-2">
                                        {getStatusIcon(system.status)}
                                        <h4 className="font-semibold">{system.name}</h4>
                                    </div>
                                    <Badge variant="outline">{system.status}</Badge>
                                </div>

                                <div className="space-y-3">
                                    <div>
                                        <div className="flex justify-between items-center mb-1">
                                            <span className="text-sm">CPU</span>
                                            <span className="text-sm">{system.current.cpu.toFixed(0)}%</span>
                                        </div>
                                        <Progress value={system.current.cpu} className="h-2" />
                                    </div>
                                    <div>
                                        <div className="flex justify-between items-center mb-1">
                                            <span className="text-sm">Memory</span>
                                            <span className="text-sm">{system.current.memory.toFixed(0)}%</span>
                                        </div>
                                        <Progress value={system.current.memory} className="h-2" />
                                    </div>
                                    <div>
                                        <div className="flex justify-between items-center mb-1">
                                            <span className="text-sm">Disk</span>
                                            <span className="text-sm">{system.current.disk.toFixed(0)}%</span>
                                        </div>
                                        <Progress value={system.current.disk} className="h-2" />
                                    </div>
                                    <div>
                                        <div className="flex justify-between items-center mb-1">
                                            <span className="text-sm">Network</span>
                                            <span className="text-sm">{system.current.network.toFixed(0)}%</span>
                                        </div>
                                        <Progress value={system.current.network} className="h-2" />
                                    </div>
                                </div>
                            </div>
                        ))}
                    </div>
                </CardContent>
            </Card>
        </div>
    );
}