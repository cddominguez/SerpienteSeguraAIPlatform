import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Progress } from "@/components/ui/progress";
import { FileText, AlertTriangle, CheckCircle, Download } from 'lucide-react';
import { motion } from 'framer-motion';

export default function ComplianceMapper({ vulnerabilities, frameworks }) {
    const [complianceStatus, setComplianceStatus] = useState({});
    const [violations, setViolations] = useState([]);
    const [reports, setReports] = useState([]);

    useEffect(() => {
        mapVulnerabilitiesToCompliance();
    }, [vulnerabilities, frameworks]);

    const mapVulnerabilitiesToCompliance = () => {
        // Simulate compliance mapping
        const status = {
            'PCI-DSS': {
                score: 78,
                violations: 3,
                requirements: [
                    { id: '6.5.1', name: 'Injection flaws', status: 'violation', vulnerabilities: ['CVE-2024-1234'] },
                    { id: '6.5.8', name: 'Improper access control', status: 'compliant', vulnerabilities: [] },
                    { id: '11.2.1', name: 'Quarterly internal vulnerability scans', status: 'compliant', vulnerabilities: [] }
                ]
            },
            'SOC2': {
                score: 85,
                violations: 2,
                requirements: [
                    { id: 'CC6.1', name: 'Logical and Physical Access Controls', status: 'violation', vulnerabilities: ['CVE-2024-1234'] },
                    { id: 'CC6.7', name: 'System Monitoring', status: 'compliant', vulnerabilities: [] }
                ]
            },
            'HIPAA': {
                score: 92,
                violations: 1,
                requirements: [
                    { id: '164.308', name: 'Administrative Safeguards', status: 'compliant', vulnerabilities: [] },
                    { id: '164.312', name: 'Technical Safeguards', status: 'violation', vulnerabilities: ['CVE-2024-5678'] }
                ]
            },
            'ISO27001': {
                score: 88,
                violations: 1,
                requirements: [
                    { id: 'A.12.6.1', name: 'Management of technical vulnerabilities', status: 'violation', vulnerabilities: ['CVE-2024-1234'] },
                    { id: 'A.14.2.5', name: 'Secure system engineering principles', status: 'compliant', vulnerabilities: [] }
                ]
            }
        };

        const allViolations = [];
        Object.entries(status).forEach(([framework, data]) => {
            data.requirements.forEach(req => {
                if (req.status === 'violation') {
                    allViolations.push({
                        framework,
                        requirement: req.id,
                        name: req.name,
                        vulnerabilities: req.vulnerabilities,
                        severity: req.vulnerabilities.length > 0 ? 'High' : 'Medium'
                    });
                }
            });
        });

        setComplianceStatus(status);
        setViolations(allViolations);
        
        // Generate reports
        setReports([
            {
                framework: 'PCI-DSS',
                type: 'Quarterly Assessment',
                generated: '2024-01-15',
                score: status['PCI-DSS'].score,
                status: 'Non-Compliant'
            },
            {
                framework: 'SOC2',
                type: 'Type II Audit',
                generated: '2024-01-10',
                score: status['SOC2'].score,
                status: 'Compliant'
            }
        ]);
    };

    const getComplianceColor = (score) => {
        if (score >= 95) return 'text-emerald-600';
        if (score >= 80) return 'text-yellow-600';
        return 'text-red-600';
    };

    const getStatusBadge = (status) => {
        return status === 'compliant' ? (
            <Badge className="bg-emerald-100 text-emerald-800">
                <CheckCircle className="w-3 h-3 mr-1" />
                Compliant
            </Badge>
        ) : (
            <Badge className="bg-red-100 text-red-800">
                <AlertTriangle className="w-3 h-3 mr-1" />
                Violation
            </Badge>
        );
    };

    return (
        <div className="space-y-6">
            {/* Compliance Overview */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                {Object.entries(complianceStatus).map(([framework, data]) => (
                    <motion.div
                        key={framework}
                        whileHover={{ scale: 1.02 }}
                        className="bg-white rounded-lg border shadow-sm p-4"
                    >
                        <div className="flex items-center justify-between mb-3">
                            <h3 className="font-semibold text-sm">{framework}</h3>
                            <FileText className="w-4 h-4 text-blue-600" />
                        </div>
                        <div className="space-y-2">
                            <div className="flex items-center justify-between">
                                <span className="text-xs text-gray-600">Score</span>
                                <span className={`text-lg font-bold ${getComplianceColor(data.score)}`}>
                                    {data.score}%
                                </span>
                            </div>
                            <Progress value={data.score} className="h-2" />
                            <div className="flex items-center justify-between text-xs">
                                <span className="text-red-600">{data.violations} violations</span>
                                <span className="text-green-600">
                                    {data.requirements.length - data.violations} compliant
                                </span>
                            </div>
                        </div>
                    </motion.div>
                ))}
            </div>

            {/* Compliance Violations */}
            <Card className="border-0 shadow-lg">
                <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                        <AlertTriangle className="w-5 h-5 text-red-600" />
                        Active Compliance Violations
                    </CardTitle>
                </CardHeader>
                <CardContent>
                    <div className="space-y-4">
                        {violations.map((violation, idx) => (
                            <motion.div
                                key={`${violation.framework}-${violation.requirement}`}
                                initial={{ opacity: 0, y: 20 }}
                                animate={{ opacity: 1, y: 0 }}
                                transition={{ delay: idx * 0.1 }}
                                className="border-l-4 border-red-500 bg-red-50 p-4 rounded-r-lg"
                            >
                                <div className="flex items-start justify-between mb-2">
                                    <div>
                                        <h4 className="font-semibold text-red-900">
                                            {violation.framework} - {violation.requirement}
                                        </h4>
                                        <p className="text-sm text-red-800">{violation.name}</p>
                                    </div>
                                    <Badge variant="destructive">{violation.severity}</Badge>
                                </div>
                                <div className="mt-2">
                                    <p className="text-sm text-red-700 mb-2">Affected Vulnerabilities:</p>
                                    <div className="flex flex-wrap gap-2">
                                        {violation.vulnerabilities.map(vuln => (
                                            <Badge key={vuln} variant="outline" className="text-xs">
                                                {vuln}
                                            </Badge>
                                        ))}
                                    </div>
                                </div>
                            </motion.div>
                        ))}
                    </div>
                </CardContent>
            </Card>

            {/* Detailed Requirements */}
            <Card className="border-0 shadow-lg">
                <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                        <FileText className="w-5 h-5 text-blue-600" />
                        Compliance Requirements Detail
                    </CardTitle>
                </CardHeader>
                <CardContent>
                    <div className="space-y-4">
                        {Object.entries(complianceStatus).map(([framework, data]) => (
                            <div key={framework} className="border rounded-lg p-4">
                                <h4 className="font-semibold mb-3">{framework}</h4>
                                <div className="space-y-2">
                                    {data.requirements.map(req => (
                                        <div key={req.id} className="flex items-center justify-between py-2 border-b border-gray-100 last:border-b-0">
                                            <div className="flex-1">
                                                <p className="font-medium text-sm">{req.id}</p>
                                                <p className="text-xs text-gray-600">{req.name}</p>
                                            </div>
                                            <div className="flex items-center gap-2">
                                                {req.vulnerabilities.length > 0 && (
                                                    <Badge variant="outline" className="text-xs">
                                                        {req.vulnerabilities.length} CVEs
                                                    </Badge>
                                                )}
                                                {getStatusBadge(req.status)}
                                            </div>
                                        </div>
                                    ))}
                                </div>
                            </div>
                        ))}
                    </div>
                </CardContent>
            </Card>

            {/* Compliance Reports */}
            <Card className="border-0 shadow-lg">
                <CardHeader>
                    <div className="flex items-center justify-between">
                        <CardTitle className="flex items-center gap-2">
                            <Download className="w-5 h-5 text-green-600" />
                            Generated Reports
                        </CardTitle>
                        <Button variant="outline" size="sm">
                            <Download className="w-4 h-4 mr-2" />
                            Generate New Report
                        </Button>
                    </div>
                </CardHeader>
                <CardContent>
                    <div className="space-y-3">
                        {reports.map((report, idx) => (
                            <div key={idx} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                                <div>
                                    <p className="font-medium text-sm">{report.framework} {report.type}</p>
                                    <p className="text-xs text-gray-600">Generated: {report.generated}</p>
                                </div>
                                <div className="flex items-center gap-3">
                                    <div className="text-right">
                                        <p className={`font-semibold ${getComplianceColor(report.score)}`}>
                                            {report.score}%
                                        </p>
                                        <p className="text-xs text-gray-500">{report.status}</p>
                                    </div>
                                    <Button size="sm" variant="outline">
                                        <Download className="w-3 h-3" />
                                    </Button>
                                </div>
                            </div>
                        ))}
                    </div>
                </CardContent>
            </Card>
        </div>
    );
}