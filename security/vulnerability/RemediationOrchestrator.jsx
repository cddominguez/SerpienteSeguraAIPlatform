import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Play, Pause, RotateCcw, CheckCircle, XCircle, Loader2, GitBranch, Package, Shield } from 'lucide-react';
import { motion, AnimatePresence } from 'framer-motion';

export default function RemediationOrchestrator({ vulnerability, onClose, onRemediate }) {
    const [remediationStage, setRemediationStage] = useState('ready');
    const [executionLog, setExecutionLog] = useState([]);
    
    const remediationSteps = [
        { id: 'backup', name: 'Backup Current State', icon: RotateCcw, duration: 2000 },
        { id: 'patch', name: 'Apply Security Patch', icon: Shield, duration: 3000 },
        { id: 'test', name: 'Run Security Tests', icon: CheckCircle, duration: 2500 },
        { id: 'deploy', name: 'Deploy to Production', icon: Package, duration: 3500 },
        { id: 'verify', name: 'Verify Fix', icon: CheckCircle, duration: 2000 }
    ];

    const executeRemediation = async () => {
        setRemediationStage('executing');
        
        for (const step of remediationSteps) {
            addLog(`Starting: ${step.name}`, 'info');
            await simulateStep(step);
            addLog(`Completed: ${step.name}`, 'success');
        }
        
        setRemediationStage('completed');
        onRemediate({ vulnerability: vulnerability.id, status: 'remediated' });
    };

    const simulateStep = (step) => {
        return new Promise(resolve => setTimeout(resolve, step.duration));
    };

    const addLog = (message, type = 'info') => {
        setExecutionLog(prev => [...prev, {
            timestamp: new Date().toISOString(),
            message,
            type
        }]);
    };

    return (
        <Dialog open={true} onOpenChange={onClose}>
            <DialogContent className="max-w-3xl">
                <DialogHeader>
                    <DialogTitle className="text-xl font-bold flex items-center gap-2">
                        <Play className="w-5 h-5 text-green-600" />
                        Automated Remediation Orchestrator
                    </DialogTitle>
                </DialogHeader>

                <div className="space-y-6">
                    {/* Vulnerability Details */}
                    <Card className="bg-gray-50">
                        <CardContent className="pt-6">
                            <div className="flex items-center justify-between mb-4">
                                <div>
                                    <h3 className="font-semibold text-lg">{vulnerability.id}</h3>
                                    <p className="text-sm text-gray-600">{vulnerability.component}</p>
                                </div>
                                <div className="flex items-center gap-2">
                                    <Badge variant="destructive">{vulnerability.severity}</Badge>
                                    <Badge variant="outline">CVSS: {vulnerability.cvss}</Badge>
                                </div>
                            </div>
                            
                            <div className="grid grid-cols-3 gap-4 text-sm">
                                <div>
                                    <p className="text-gray-500">Affected Containers</p>
                                    <p className="font-medium">{vulnerability.affectedContainers.join(', ')}</p>
                                </div>
                                <div>
                                    <p className="text-gray-500">Estimated Fix Time</p>
                                    <p className="font-medium">{vulnerability.estimatedFixTime}</p>
                                </div>
                                <div>
                                    <p className="text-gray-500">Performance Impact</p>
                                    <p className="font-medium">{vulnerability.performanceImpact}</p>
                                </div>
                            </div>
                        </CardContent>
                    </Card>

                    {/* Remediation Steps */}
                    <div>
                        <h4 className="font-semibold mb-3">Remediation Steps</h4>
                        <div className="space-y-2">
                            {remediationSteps.map((step, idx) => {
                                const StepIcon = step.icon;
                                const isActive = remediationStage === 'executing' && idx === 0; // Simplified for demo
                                const isCompleted = remediationStage === 'completed';
                                
                                return (
                                    <motion.div
                                        key={step.id}
                                        initial={{ opacity: 0, x: -20 }}
                                        animate={{ opacity: 1, x: 0 }}
                                        transition={{ delay: idx * 0.1 }}
                                        className={`flex items-center gap-3 p-3 rounded-lg ${
                                            isActive ? 'bg-blue-50 border border-blue-200' :
                                            isCompleted ? 'bg-green-50' :
                                            'bg-gray-50'
                                        }`}
                                    >
                                        <div className={`p-2 rounded-full ${
                                            isActive ? 'bg-blue-100' :
                                            isCompleted ? 'bg-green-100' :
                                            'bg-gray-100'
                                        }`}>
                                            {isActive ? (
                                                <Loader2 className="w-4 h-4 text-blue-600 animate-spin" />
                                            ) : (
                                                <StepIcon className={`w-4 h-4 ${
                                                    isCompleted ? 'text-green-600' : 'text-gray-500'
                                                }`} />
                                            )}
                                        </div>
                                        <span className={`font-medium ${
                                            isActive ? 'text-blue-900' :
                                            isCompleted ? 'text-green-900' :
                                            'text-gray-700'
                                        }`}>
                                            {step.name}
                                        </span>
                                        {isCompleted && (
                                            <CheckCircle className="w-4 h-4 text-green-600 ml-auto" />
                                        )}
                                    </motion.div>
                                );
                            })}
                        </div>
                    </div>

                    {/* Execution Log */}
                    {executionLog.length > 0 && (
                        <div>
                            <h4 className="font-semibold mb-3">Execution Log</h4>
                            <div className="bg-gray-900 text-gray-100 p-4 rounded-lg h-40 overflow-y-auto font-mono text-xs">
                                {executionLog.map((log, idx) => (
                                    <div key={idx} className={`mb-1 ${
                                        log.type === 'success' ? 'text-green-400' :
                                        log.type === 'error' ? 'text-red-400' :
                                        'text-gray-300'
                                    }`}>
                                        [{new Date(log.timestamp).toLocaleTimeString()}] {log.message}
                                    </div>
                                ))}
                            </div>
                        </div>
                    )}

                    {/* Actions */}
                    <div className="flex justify-between">
                        <Button variant="outline" onClick={onClose}>
                            Cancel
                        </Button>
                        <div className="flex gap-2">
                            <Button
                                variant="outline"
                                onClick={() => {}}
                                disabled={remediationStage === 'executing'}
                            >
                                <GitBranch className="w-4 h-4 mr-2" />
                                Create PR Instead
                            </Button>
                            <Button
                                onClick={executeRemediation}
                                disabled={remediationStage !== 'ready'}
                                className="bg-green-600 hover:bg-green-700"
                            >
                                {remediationStage === 'executing' ? (
                                    <>
                                        <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                                        Executing...
                                    </>
                                ) : remediationStage === 'completed' ? (
                                    <>
                                        <CheckCircle className="w-4 h-4 mr-2" />
                                        Completed
                                    </>
                                ) : (
                                    <>
                                        <Play className="w-4 h-4 mr-2" />
                                        Execute Remediation
                                    </>
                                )}
                            </Button>
                        </div>
                    </div>
                </div>
            </DialogContent>
        </Dialog>
    );
}